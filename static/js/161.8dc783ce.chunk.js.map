{"version":3,"file":"static/js/161.8dc783ce.chunk.js","mappings":"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","sources":["Components/Link/Link.style.tsx","Components/Link/Link.tsx","Components/Page/Page.style.tsx","Components/Page/Page.tsx","Components/PanelContent/PanelContent.tsx","Components/PanelHeader/PanelHeader.style.tsx","Components/PanelHeader/PanelHeader.tsx","Components/Panel/Panel.tsx","Components/PanelImage/PanelImage.style.tsx","Components/PanelImage/PanelImage.tsx","Pages/AboutMe.tsx"],"sourcesContent":["import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, AnchorHTMLAttributes } from \"react\";\r\n\r\ntype LinkA = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledLink: LinkA = styled.a`\r\n  color: ${({ theme: { color } }) => {\r\n    return color;\r\n  }};\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default StyledLink;\r\n","import {\r\n  AnchorHTMLAttributes,\r\n  DetailedHTMLProps,\r\n  FC,\r\n  PropsWithChildren,\r\n} from \"react\";\r\nimport StyledLink from \"././Link.style\";\r\n\r\ntype LinkProps = PropsWithChildren<\r\n  DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>\r\n>;\r\n\r\nconst Link: FC<LinkProps> = ({ ...rest }): JSX.Element => {\r\n  return <StyledLink {...rest} target=\"_blang\" rel=\"noopener noreferrer\" />;\r\n};\r\n\r\nexport default Link;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\nimport { animated } from \"react-spring\";\r\n\r\ntype PageDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\ntype PageHeader = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nexport const StyledPage: PageDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  @media (max-width: 500px) {\r\n    margin-left: 60px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${({ theme: { background } }) => {\r\n      return background;\r\n    }};\r\n  }\r\n  &:hover {\r\n    overflow-y: auto;\r\n    ::-webkit-scrollbar-thumb {\r\n      background: ${({ theme: { scrollbar } }) => {\r\n        return scrollbar;\r\n      }};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledHeader: PageHeader = styled.header`\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 2;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  min-height: 75px;\r\n  font-size: 1.5rem;\r\n  padding-left: 1rem;\r\n  backdrop-filter: blur(8px) saturate(180%);\r\n  background: ${({ theme: { header } }) => {\r\n    return header;\r\n  }};\r\n  border-bottom: 1px solid\r\n    ${({ theme: { border } }) => {\r\n      return border;\r\n    }};\r\n`;\r\n\r\nexport const StyledChildren = styled(animated.div)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  gap: 10px;\r\n`;\r\n","import { FC, PropsWithChildren } from \"react\";\r\nimport { StyledPage, StyledHeader, StyledChildren } from \"./Page.style\";\r\nimport { useSpring } from \"react-spring\";\r\n\r\ntype PageProps = PropsWithChildren<{\r\n  header: string;\r\n  wrap?: boolean;\r\n}>;\r\n\r\nconst Page: FC<PageProps> = ({ children, header }: PageProps): JSX.Element => {\r\n  const animatedPage = useSpring({\r\n    from: {\r\n      transform: \"translateY(150px)\",\r\n      opacity: 0,\r\n    },\r\n    to: {\r\n      transform: \"translateY(0px)\",\r\n      opacity: 1,\r\n    },\r\n    config: {\r\n      tension: 300,\r\n      mass: 0.5,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <StyledPage>\r\n      <StyledHeader>{header}</StyledHeader>\r\n      <StyledChildren style={animatedPage}>{children}</StyledChildren>\r\n    </StyledPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelContentDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst PanelContent: PanelContentDiv = styled.div`\r\n  display: flex;\r\n  padding: 10px;\r\n  gap: 10px;\r\n`;\r\n\r\nexport default PanelContent;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelHeaderHeader = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledPanelHeader: PanelHeaderHeader = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid ${({ theme: { border } }) => border};\r\n`;\r\n\r\nexport default StyledPanelHeader;\r\n","import { FC } from \"react\";\r\nimport StyledPanelHeader from \"./PanelHeader.style\";\r\nimport Icon from \"../Icon/Icon\";\r\n\r\ntype PanelHeaderProps = {\r\n  header: string;\r\n  icon: string;\r\n};\r\n\r\nconst PanelHeader: FC<PanelHeaderProps> = ({\r\n  header,\r\n  icon,\r\n}: PanelHeaderProps): JSX.Element => {\r\n  return (\r\n    <StyledPanelHeader>\r\n      <span>{header}</span>\r\n      <Icon>{icon}</Icon>\r\n    </StyledPanelHeader>\r\n  );\r\n};\r\n\r\nexport default PanelHeader;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst Panel: PanelDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  background: ${({ theme: { hamburger } }) => {\r\n    return hamburger;\r\n  }};\r\n  border: 1px solid\r\n    ${({ theme: { border } }) => {\r\n      return border;\r\n    }};\r\n  box-shadow: 0 0 5px 0\r\n    ${({ theme: { shadow } }) => {\r\n      return shadow;\r\n    }};\r\n`;\r\n\r\nexport default Panel;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelImageDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\ntype StyledlImgProps = {\r\n  src: string;\r\n  alt: string;\r\n};\r\n\r\ntype PanelImageDivProps = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  } & StyledlImgProps,\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nexport const StylePanelImage: PanelImageDiv = styled.div`\r\n  display: flex;\r\n  gap: 10px;\r\n  @media (max-width: 650px) {\r\n    flex-wrap: wrap;\r\n  }\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nexport const StyledlImg: PanelImageDivProps = styled.div<StyledlImgProps>`\r\n  border-radius: 10px;\r\n  min-width: 150px;\r\n  min-height: 150px;\r\n  height: 100%;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-image: ${({ src }) => {\r\n    return `url(${src})`;\r\n  }};\r\n  border: 2px solid\r\n    ${({ theme: { border } }) => {\r\n      return border;\r\n    }};\r\n`;\r\n\r\nexport const StyledImgWrapper: PanelImageDiv = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n`;\r\n","import { FC } from \"react\";\r\nimport {\r\n  StylePanelImage,\r\n  StyledlImg,\r\n  StyledImgWrapper,\r\n} from \"./PanelImage.style\";\r\n\r\ntype PanelImageProps = {\r\n  src: string;\r\n  alt: string;\r\n  description: string;\r\n};\r\n\r\nconst PanelImage: FC<PanelImageProps> = ({\r\n  src,\r\n  alt,\r\n  description,\r\n}: PanelImageProps): JSX.Element => {\r\n  return (\r\n    <StylePanelImage>\r\n      <StyledImgWrapper>\r\n        <StyledlImg src={src} alt={alt} />\r\n      </StyledImgWrapper>\r\n      <span>{description}</span>\r\n    </StylePanelImage>\r\n  );\r\n};\r\n\r\nexport default PanelImage;\r\n","import { FC, memo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Page from \"../Components/Page/Page\";\r\nimport Panel from \"../Components/Panel/Panel\";\r\nimport PanelHeader from \"../Components/PanelHeader/PanelHeader\";\r\nimport PanelContent from \"../Components/PanelContent/PanelContent\";\r\nimport PanelImage from \"../Components/PanelImage/PanelImage\";\r\nimport usefulLinks from \"../Data/usefulLinks.json\";\r\nimport Link from \"../Components/Link/Link\";\r\n\r\nconst AboutMe: FC = (): JSX.Element => {\r\n  const { t } = useTranslation(\"aboutMe\");\r\n\r\n  return (\r\n    <Page header={t(\"aboutMe\")}>\r\n      <Panel>\r\n        <PanelHeader header={t(\"somethingAboutMe\")} icon=\"&#xE006;\" />\r\n        <PanelContent>\r\n          <PanelImage\r\n            src=\"https://avatars.githubusercontent.com/u/40388335?v=4\"\r\n            alt=\"Avatar\"\r\n            description={t(\"description\")}\r\n          />\r\n        </PanelContent>\r\n      </Panel>\r\n      <Panel>\r\n        <PanelHeader header={t(\"workingOn\")} icon=\"&#xE121;\" />\r\n        <PanelContent>\r\n          <Link href=\"https://github.com/MateuszPerczak/mateuszperczak.github.io\">\r\n            My portfolio\r\n          </Link>\r\n          <Link href=\"https://github.com/Py4Js/PyScript-React\">\r\n            PyScript-React\r\n          </Link>\r\n        </PanelContent>\r\n      </Panel>\r\n      <Panel>\r\n        <PanelHeader header={t(\"currentlyLearning\")} icon=\"&#xE1D3;\" />\r\n        <PanelContent>\r\n          <span>TypeScript</span>\r\n        </PanelContent>\r\n      </Panel>\r\n      <Panel>\r\n        <PanelHeader header={t(\"usefulLinks\")} icon=\"&#xE167;\" />\r\n        <PanelContent>\r\n          {usefulLinks.map((link, index) => {\r\n            return (\r\n              <Link key={index} href={link.href}>\r\n                {link.header}\r\n              </Link>\r\n            );\r\n          })}\r\n        </PanelContent>\r\n      </Panel>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default memo(AboutMe);\r\n"],"names":["styled","theme","color","rest","target","rel","StyledPage","background","scrollbar","StyledHeader","header","border","StyledChildren","animated","children","animatedPage","useSpring","from","transform","opacity","to","config","tension","mass","style","PanelContent","icon","Icon","Panel","hamburger","shadow","StylePanelImage","StyledlImg","src","StyledImgWrapper","alt","description","AboutMe","t","useTranslation","Page","PanelHeader","Link","href","usefulLinks","map","link","index","memo"],"sourceRoot":""}