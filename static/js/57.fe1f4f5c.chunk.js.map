{"version":3,"file":"static/js/57.fe1f4f5c.chunk.js","mappings":"iMAqBA,E,QAR0BA,EAAAA,EAAH,wFACZ,YACP,OADiC,EAAvBC,MAASC,S,SCEvB,EAJ4B,SAAC,GAA8B,IAAzBC,EAAwB,oBACxD,OAAO,SAAC,GAAD,kBAAgBA,GAAhB,IAAsBC,OAAO,SAASC,IAAI,2B,4FCUtCC,EAAsBN,EAAAA,EAAAA,IAAH,4VAUd,YACZ,OAD2C,EAA5BC,MAASM,cAOV,YACZ,OAD0C,EAA3BN,MAASO,aAOnBC,EAA2BT,EAAAA,EAAAA,OAAH,2SAWrB,YACZ,OADuC,EAAxBC,MAASS,UAItB,YACA,OAD2B,EAAxBT,MAASU,UAKLC,GAAiBZ,EAAAA,EAAAA,GAAOa,EAAAA,SAAAA,IAAPb,CAAH,qG,SClC3B,EAxB4B,SAAC,GAAkD,IAAhDc,EAA+C,EAA/CA,SAAUJ,EAAqC,EAArCA,OACjCK,GAAeC,EAAAA,EAAAA,WAAU,CAC7BC,KAAM,CACJC,UAAW,oBACXC,QAAS,GAEXC,GAAI,CACFF,UAAW,kBACXC,QAAS,GAEXE,OAAQ,CACNC,QAAS,IACTC,KAAM,MAIV,OACE,UAACjB,EAAD,YACE,SAACG,EAAD,UAAeC,KACf,SAACE,EAAD,CAAgBY,MAAOT,EAAvB,SAAsCD,S,oCCftCW,E,QAAgCzB,EAAAA,IAAH,0EAMnC,O,oECGA,E,QAT6CA,EAAAA,OAAH,4KAMb,qBAAGC,MAASU,U,mBCEzC,EAZ0C,SAAC,GAGL,IAFpCD,EAEmC,EAFnCA,OACAgB,EACmC,EADnCA,KAEA,OACE,UAAC,EAAD,YACE,0BAAOhB,KACP,SAACiB,EAAA,EAAD,UAAOD,S,oCCHPE,E,QAAkB5B,EAAAA,IAAH,mLAIL,YACZ,OAD0C,EAA3BC,MAAS4B,aAItB,YACA,OAD2B,EAAxB5B,MAASU,UAIZ,YACA,OAD2B,EAAxBV,MAAS6B,UAKlB,O,mJChBaC,GAAqB/B,EAAAA,EAAAA,GAAO4B,EAAAA,EAAP5B,CAAH,wJAUlBgC,EAAuChC,EAAAA,EAAAA,KAAH,yGAG3B,qBAAGC,MAASM,cACvB,qBAAGN,MAASgC,QAGVC,EAA6ClC,EAAAA,EAAAA,KAAH,4E,uCCavD,EAzB4C,SAAC,GAMN,IALrCU,EAKoC,EALpCA,OACAyB,EAIoC,EAJpCA,MACAC,EAGoC,EAHpCA,MACAC,EAEoC,EAFpCA,YACAC,EACoC,EADpCA,EAEA,OACE,UAACP,EAAD,YACE,SAACQ,EAAA,EAAD,CAAa7B,OAAQA,EAAQgB,KAAK,YAClC,SAACQ,EAAD,UAA2BI,EAAED,MAC7B,SAACZ,EAAA,EAAD,UACGU,EAAMK,KAAI,WAAmBC,GAAW,IAA3BC,EAA0B,EAA1BA,KAAMhC,EAAoB,EAApBA,OAClB,OACE,SAACiC,EAAA,EAAD,CAAkBD,KAAMA,EAAxB,SACGhC,GADQ+B,SAMjB,SAACT,EAAD,UAAqBI,QClB3B,EARsCpC,EAAAA,EAAAA,IAAH,gH,q8DCN7B4C,EAAe,WACnB,IAAQN,GAAsCO,EAAAA,EAAAA,GAAe,YAArDP,EAER,OACE,SAACQ,EAAA,EAAD,CAAMpC,OAAQ4B,EAAE,YAAhB,UACE,SAAC,EAAD,UACGS,EAAAA,KAAa,SAACC,EAASP,GACtB,OAAO,SAAC,GAAD,kBAA8BO,GAA9B,IAAuCV,EAAGA,IAAvBG,WAOpC,GAAeQ,EAAAA,EAAAA,MAAKL","sources":["Components/Link/Link.style.tsx","Components/Link/Link.tsx","Components/Page/Page.style.tsx","Components/Page/Page.tsx","Components/PanelContent/PanelContent.tsx","Components/PanelHeader/PanelHeader.style.tsx","Components/PanelHeader/PanelHeader.tsx","Components/Panel/Panel.tsx","Components/PanelProject/PanelProject.style.tsx","Components/PanelProject/PanelProject.tsx","Components/PanelWrapper/PanelWrapper.tsx","Pages/Projects.tsx"],"sourcesContent":["import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, AnchorHTMLAttributes } from \"react\";\r\n\r\ntype LinkA = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledLink: LinkA = styled.a`\r\n  color: ${({ theme: { color } }) => {\r\n    return color;\r\n  }};\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n`;\r\n\r\nexport default StyledLink;\r\n","import {\r\n  AnchorHTMLAttributes,\r\n  DetailedHTMLProps,\r\n  FC,\r\n  PropsWithChildren,\r\n} from \"react\";\r\nimport StyledLink from \"././Link.style\";\r\n\r\ntype LinkProps = PropsWithChildren<\r\n  DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>\r\n>;\r\n\r\nconst Link: FC<LinkProps> = ({ ...rest }): JSX.Element => {\r\n  return <StyledLink {...rest} target=\"_blang\" rel=\"noopener noreferrer\" />;\r\n};\r\n\r\nexport default Link;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\nimport { animated } from \"react-spring\";\r\n\r\ntype PageDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\ntype PageHeader = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nexport const StyledPage: PageDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  @media (max-width: 500px) {\r\n    margin-left: 60px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${({ theme: { background } }) => {\r\n      return background;\r\n    }};\r\n  }\r\n  &:hover {\r\n    overflow-y: auto;\r\n    ::-webkit-scrollbar-thumb {\r\n      background: ${({ theme: { scrollbar } }) => {\r\n        return scrollbar;\r\n      }};\r\n    }\r\n  }\r\n`;\r\n\r\nexport const StyledHeader: PageHeader = styled.header`\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 2;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  min-height: 75px;\r\n  font-size: 1.5rem;\r\n  padding-left: 1rem;\r\n  backdrop-filter: blur(8px) saturate(180%);\r\n  background: ${({ theme: { header } }) => {\r\n    return header;\r\n  }};\r\n  border-bottom: 1px solid\r\n    ${({ theme: { border } }) => {\r\n      return border;\r\n    }};\r\n`;\r\n\r\nexport const StyledChildren = styled(animated.div)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  gap: 10px;\r\n`;\r\n","import { FC, PropsWithChildren } from \"react\";\r\nimport { StyledPage, StyledHeader, StyledChildren } from \"./Page.style\";\r\nimport { useSpring } from \"react-spring\";\r\n\r\ntype PageProps = PropsWithChildren<{\r\n  header: string;\r\n  wrap?: boolean;\r\n}>;\r\n\r\nconst Page: FC<PageProps> = ({ children, header }: PageProps): JSX.Element => {\r\n  const animatedPage = useSpring({\r\n    from: {\r\n      transform: \"translateY(150px)\",\r\n      opacity: 0,\r\n    },\r\n    to: {\r\n      transform: \"translateY(0px)\",\r\n      opacity: 1,\r\n    },\r\n    config: {\r\n      tension: 300,\r\n      mass: 0.5,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <StyledPage>\r\n      <StyledHeader>{header}</StyledHeader>\r\n      <StyledChildren style={animatedPage}>{children}</StyledChildren>\r\n    </StyledPage>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelContentDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst PanelContent: PanelContentDiv = styled.div`\r\n  display: flex;\r\n  padding: 10px;\r\n  gap: 10px;\r\n`;\r\n\r\nexport default PanelContent;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelHeaderHeader = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLElement>, HTMLElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst StyledPanelHeader: PanelHeaderHeader = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  border-bottom: 1px solid ${({ theme: { border } }) => border};\r\n`;\r\n\r\nexport default StyledPanelHeader;\r\n","import { FC } from \"react\";\r\nimport StyledPanelHeader from \"./PanelHeader.style\";\r\nimport Icon from \"../Icon/Icon\";\r\n\r\ntype PanelHeaderProps = {\r\n  header: string;\r\n  icon: string;\r\n};\r\n\r\nconst PanelHeader: FC<PanelHeaderProps> = ({\r\n  header,\r\n  icon,\r\n}: PanelHeaderProps): JSX.Element => {\r\n  return (\r\n    <StyledPanelHeader>\r\n      <span>{header}</span>\r\n      <Icon>{icon}</Icon>\r\n    </StyledPanelHeader>\r\n  );\r\n};\r\n\r\nexport default PanelHeader;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst Panel: PanelDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  background: ${({ theme: { hamburger } }) => {\r\n    return hamburger;\r\n  }};\r\n  border: 1px solid\r\n    ${({ theme: { border } }) => {\r\n      return border;\r\n    }};\r\n  box-shadow: 0 0 5px 0\r\n    ${({ theme: { shadow } }) => {\r\n      return shadow;\r\n    }};\r\n`;\r\n\r\nexport default Panel;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\nimport Panel from \"../Panel/Panel\";\r\n\r\ntype PanelProjectSpan = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nexport const StyledProjectPanel = styled(Panel)`\r\n  width: 40%;\r\n  overflow: hidden;\r\n  @media (max-width: 400px) {\r\n    min-width: 180px;\r\n  }\r\n  min-width: 300px;\r\n  flex: 1;\r\n`;\r\n\r\nexport const StyledProjectLangs: PanelProjectSpan = styled.span`\r\n  font-size: 0.8rem;\r\n  padding: 10px;\r\n  background-color: ${({ theme: { background } }) => background};\r\n  color: ${({ theme: { date } }) => date};\r\n`;\r\n\r\nexport const StyledProjectDescription: PanelProjectSpan = styled.span`\r\n  font-size: 0.9rem;\r\n  padding: 10px;\r\n  flex: 1;\r\n`;\r\n","import { FC } from \"react\";\r\nimport {\r\n  StyledProjectPanel,\r\n  StyledProjectLangs,\r\n  StyledProjectDescription,\r\n} from \"./PanelProject.style\";\r\nimport PanelHeader from \"../PanelHeader/PanelHeader\";\r\nimport PanelContent from \"../PanelContent/PanelContent\";\r\nimport Link from \"../Link/Link\";\r\nimport { TFunction } from \"react-i18next\";\r\n\r\ntype PanelProjectProps = {\r\n  header: string;\r\n  description: string;\r\n  links: { href: string; header: string }[];\r\n  langs: string;\r\n  t: TFunction;\r\n};\r\n\r\nconst PanelProject: FC<PanelProjectProps> = ({\r\n  header,\r\n  links,\r\n  langs,\r\n  description,\r\n  t,\r\n}: PanelProjectProps): JSX.Element => {\r\n  return (\r\n    <StyledProjectPanel>\r\n      <PanelHeader header={header} icon=\"&#xECAA;\" />\r\n      <StyledProjectDescription>{t(description)}</StyledProjectDescription>\r\n      <PanelContent>\r\n        {links.map(({ href, header }, index) => {\r\n          return (\r\n            <Link key={index} href={href}>\r\n              {header}\r\n            </Link>\r\n          );\r\n        })}\r\n      </PanelContent>\r\n      <StyledProjectLangs>{langs}</StyledProjectLangs>\r\n    </StyledProjectPanel>\r\n  );\r\n};\r\n\r\nexport default PanelProject;\r\n","import { Theme } from \"@emotion/react\";\r\nimport styled, { StyledComponent } from \"@emotion/styled\";\r\nimport { ElementType, DetailedHTMLProps, HTMLAttributes } from \"react\";\r\n\r\ntype PanelWrapperDiv = StyledComponent<\r\n  {\r\n    theme?: Theme;\r\n    as?: ElementType;\r\n  },\r\n  DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>,\r\n  Record<string, unknown>\r\n>;\r\n\r\nconst PanelWrapper: PanelWrapperDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n`;\r\n\r\nexport default PanelWrapper;\r\n","import { FC, memo } from \"react\";\r\nimport { useTranslation, UseTranslationResponse } from \"react-i18next\";\r\nimport Page from \"../Components/Page/Page\";\r\nimport PanelProject from \"../Components/PanelProject/PanelProject\";\r\nimport PanelWrapper from \"../Components/PanelWrapper/PanelWrapper\";\r\nimport projects from \"../Data/projects.json\";\r\n\r\nconst Projects: FC = (): JSX.Element => {\r\n  const { t }: UseTranslationResponse<string> = useTranslation(\"projects\");\r\n\r\n  return (\r\n    <Page header={t(\"projects\")}>\r\n      <PanelWrapper>\r\n        {projects.map((project, index) => {\r\n          return <PanelProject key={index} {...project} t={t} />;\r\n        })}\r\n      </PanelWrapper>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default memo(Projects);\r\n"],"names":["styled","theme","color","rest","target","rel","StyledPage","background","scrollbar","StyledHeader","header","border","StyledChildren","animated","children","animatedPage","useSpring","from","transform","opacity","to","config","tension","mass","style","PanelContent","icon","Icon","Panel","hamburger","shadow","StyledProjectPanel","StyledProjectLangs","date","StyledProjectDescription","links","langs","description","t","PanelHeader","map","index","href","Link","Projects","useTranslation","Page","projects","project","memo"],"sourceRoot":""}